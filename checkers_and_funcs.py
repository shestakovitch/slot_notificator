import time
import random
import json
import requests

from selenium.common import NoSuchElementException, TimeoutException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
from config import BASE_URL, LOGIN, PASSWORD, USER_NAME
from logger_config import setup_logger
from telegram_sender import send_message

logger = setup_logger(__name__)


def random_sleep(min_seconds=1, max_seconds=5):
    time.sleep(random.uniform(min_seconds, max_seconds))


def scroll_page(driver):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ –∫–æ–Ω—Ü–∞"""
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    random_sleep()


def move_mouse(driver):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
    actions = ActionChains(driver)
    actions.move_to_element(driver.find_element(By.TAG_NAME, "body")).perform()
    random_sleep()


def human_typing(element, text):
    for char in text:
        element.send_keys(char)
        time.sleep(random.uniform(0.1, 0.3))


def login(driver):
    logger.info("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–Ω")
    driver.get(url=BASE_URL)

    try:
        scroll_page(driver)
        move_mouse(driver)

        # –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é email –º—ã—à—å—é
        email_element = driver.find_element(By.ID, value="login-email")
        ActionChains(driver).move_to_element(email_element).click().perform()
        human_typing(email_element, LOGIN)
        random_sleep(1, 2)

        # –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é password –º—ã—à—å—é
        password_element = driver.find_element(By.ID, value="login-password")
        ActionChains(driver).move_to_element(password_element).click().perform()
        human_typing(password_element, PASSWORD)
        random_sleep(1, 2)

        # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞ –º—ã—à—å—é
        login_button = driver.find_element(By.XPATH, "//button[@type='submit']")
        ActionChains(driver).move_to_element(login_button).click().perform()
        time.sleep(5)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {e}")
        return False


def check_unavailable_or_verification_error(driver):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ URL –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—à–∏–±–∫–∏.
    –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ª–æ–≥–∏—Ä—É–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    """
    try:
        if "unavailable" in driver.title.lower():
            logger.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: unavailable")
            driver.quit()
            return True
        if "error" in driver.current_url.lower():
            logger.error(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: An error occurred while processing the request")
            driver.quit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
    return False


def check_login(driver):
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located(
                (By.XPATH, f"//figure[@class='main-nav__avatar']//figcaption[contains(text(), '{USER_NAME}')]"))
        )
        return True
    except NoSuchElementException:
        return False
    except TimeoutException:
        logger.warning("‚è±Ô∏è –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ª–æ–≥–∏–Ω–∞.")
        return False


def save_cookies(driver, path="cookies.json"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç cookies —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
    """
    try:
        cookies = driver.get_cookies()
        with open(path, "w") as f:
            json.dump(cookies, f)
        logger.info(f"üç™ Cookies —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ cookies: {e}")


def load_cookies(path="cookies.json"):
    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –∏–∑ {path}")
    try:
        with open(path, "r") as f:
            selenium_cookies = json.load(f)
        requests_cookies = {cookie['name']: cookie['value'] for cookie in selenium_cookies}
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(requests_cookies)} cookies –¥–ª—è requests")
        return requests_cookies
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cookies: {e}")
        return {}


def check_slots(url1, url2):
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/135.0.0.0 Safari/537.36"
        ),
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Accept-Language": "en-US,en;q=0.9",
        "X-Requested-With": "XMLHttpRequest",
        "Referer": "https://prenotami.esteri.it/",
        "Origin": "https://prenotami.esteri.it",
        "Connection": "keep-alive",
    }

    cookies = load_cookies()
    if not cookies:
        logger.error("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    for url in (url1, url2):
        try:
            logger.info("üåê –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ %s", url)
            response = requests.get(url, cookies=cookies, headers=headers, timeout=5)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ %s: %s", url, e)
            continue

        page_text = response.text

        ERROR_MESSAGES = (
            "this site can‚Äôt be reached",
            "this site can't be reached",
            "runtime error",
        )

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            for message in ERROR_MESSAGES:
                if message in page_text.lower():
                    logger.error("üö´ –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %s", message)
                    return True

            if "Informacije o rezervaciji" in page_text.lower():
                logger.info("üü¢ –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—è–≤–∏–ª—Å—è —Å–ª–æ—Ç!")
                send_message(f"–í–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤–∏–ª—Å—è —Å–ª–æ—Ç –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: {url}")
            else:
                logger.info("‚ö†Ô∏è –ù–µ—Ç —Å–ª–æ—Ç–æ–≤")

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %s", e)
            continue

    return False
